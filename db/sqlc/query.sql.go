// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
)

const listLgtmImageIds = `-- name: ListLgtmImageIds :many
SELECT id FROM lgtm_images
`

func (q *Queries) ListLgtmImageIds(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, listLgtmImageIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLgtmImages = `-- name: ListLgtmImages :many
SELECT id, filename, path FROM lgtm_images
WHERE id = ? OR id = ? OR id = ? OR id = ? OR id = ? OR id = ? OR id = ? OR id = ? OR id = ?
`

type ListLgtmImagesParams struct {
	ID   int32
	ID_2 int32
	ID_3 int32
	ID_4 int32
	ID_5 int32
	ID_6 int32
	ID_7 int32
	ID_8 int32
	ID_9 int32
}

type ListLgtmImagesRow struct {
	ID       int32
	Filename string
	Path     string
}

func (q *Queries) ListLgtmImages(ctx context.Context, arg ListLgtmImagesParams) ([]ListLgtmImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listLgtmImages,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
		arg.ID_5,
		arg.ID_6,
		arg.ID_7,
		arg.ID_8,
		arg.ID_9,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLgtmImagesRow
	for rows.Next() {
		var i ListLgtmImagesRow
		if err := rows.Scan(&i.ID, &i.Filename, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentlyCreatedLgtmImages = `-- name: ListRecentlyCreatedLgtmImages :many
SELECT id, filename, path FROM lgtm_images
ORDER BY id DESC LIMIT ?
`

type ListRecentlyCreatedLgtmImagesRow struct {
	ID       int32
	Filename string
	Path     string
}

func (q *Queries) ListRecentlyCreatedLgtmImages(ctx context.Context, limit int32) ([]ListRecentlyCreatedLgtmImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecentlyCreatedLgtmImages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecentlyCreatedLgtmImagesRow
	for rows.Next() {
		var i ListRecentlyCreatedLgtmImagesRow
		if err := rows.Scan(&i.ID, &i.Filename, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
