// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that JwtValidatorMock does implement JwtValidator.
// If this is not the case, regenerate this file with moq.
var _ JwtValidator = &JwtValidatorMock{}

// JwtValidatorMock is a mock implementation of JwtValidator.
//
//	func TestSomethingThatUsesJwtValidator(t *testing.T) {
//
//		// make and configure a mocked JwtValidator
//		mockedJwtValidator := &JwtValidatorMock{
//			ValidateFunc: func(accessToken string) error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedJwtValidator in code that requires JwtValidator
//		// and then make assertions.
//
//	}
type JwtValidatorMock struct {
	// ValidateFunc mocks the Validate method.
	ValidateFunc func(accessToken string) error

	// calls tracks calls to the methods.
	calls struct {
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
	}
	lockValidate sync.RWMutex
}

// Validate calls ValidateFunc.
func (mock *JwtValidatorMock) Validate(accessToken string) error {
	if mock.ValidateFunc == nil {
		panic("JwtValidatorMock.ValidateFunc: method is nil but JwtValidator.Validate was just called")
	}
	callInfo := struct {
		AccessToken string
	}{
		AccessToken: accessToken,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(accessToken)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedJwtValidator.ValidateCalls())
func (mock *JwtValidatorMock) ValidateCalls() []struct {
	AccessToken string
} {
	var calls []struct {
		AccessToken string
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
