// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that S3RepositoryMock does implement S3Repository.
// If this is not the case, regenerate this file with moq.
var _ S3Repository = &S3RepositoryMock{}

// S3RepositoryMock is a mock implementation of S3Repository.
//
//	func TestSomethingThatUsesS3Repository(t *testing.T) {
//
//		// make and configure a mocked S3Repository
//		mockedS3Repository := &S3RepositoryMock{
//			UploadFunc: func(contextMoqParam context.Context, uploadS3param *UploadS3param) error {
//				panic("mock out the Upload method")
//			},
//		}
//
//		// use mockedS3Repository in code that requires S3Repository
//		// and then make assertions.
//
//	}
type S3RepositoryMock struct {
	// UploadFunc mocks the Upload method.
	UploadFunc func(contextMoqParam context.Context, uploadS3param *UploadS3param) error

	// calls tracks calls to the methods.
	calls struct {
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UploadS3param is the uploadS3param argument value.
			UploadS3param *UploadS3param
		}
	}
	lockUpload sync.RWMutex
}

// Upload calls UploadFunc.
func (mock *S3RepositoryMock) Upload(contextMoqParam context.Context, uploadS3param *UploadS3param) error {
	if mock.UploadFunc == nil {
		panic("S3RepositoryMock.UploadFunc: method is nil but S3Repository.Upload was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		UploadS3param   *UploadS3param
	}{
		ContextMoqParam: contextMoqParam,
		UploadS3param:   uploadS3param,
	}
	mock.lockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	mock.lockUpload.Unlock()
	return mock.UploadFunc(contextMoqParam, uploadS3param)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//
//	len(mockedS3Repository.UploadCalls())
func (mock *S3RepositoryMock) UploadCalls() []struct {
	ContextMoqParam context.Context
	UploadS3param   *UploadS3param
} {
	var calls []struct {
		ContextMoqParam context.Context
		UploadS3param   *UploadS3param
	}
	mock.lockUpload.RLock()
	calls = mock.calls.Upload
	mock.lockUpload.RUnlock()
	return calls
}
