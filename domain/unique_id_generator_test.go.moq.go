// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that UniqueIdGeneratorMock does implement UniqueIdGenerator.
// If this is not the case, regenerate this file with moq.
var _ UniqueIdGenerator = &UniqueIdGeneratorMock{}

// UniqueIdGeneratorMock is a mock implementation of UniqueIdGenerator.
//
//	func TestSomethingThatUsesUniqueIdGenerator(t *testing.T) {
//
//		// make and configure a mocked UniqueIdGenerator
//		mockedUniqueIdGenerator := &UniqueIdGeneratorMock{
//			GenerateFunc: func() (string, error) {
//				panic("mock out the Generate method")
//			},
//		}
//
//		// use mockedUniqueIdGenerator in code that requires UniqueIdGenerator
//		// and then make assertions.
//
//	}
type UniqueIdGeneratorMock struct {
	// GenerateFunc mocks the Generate method.
	GenerateFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Generate holds details about calls to the Generate method.
		Generate []struct {
		}
	}
	lockGenerate sync.RWMutex
}

// Generate calls GenerateFunc.
func (mock *UniqueIdGeneratorMock) Generate() (string, error) {
	if mock.GenerateFunc == nil {
		panic("UniqueIdGeneratorMock.GenerateFunc: method is nil but UniqueIdGenerator.Generate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGenerate.Lock()
	mock.calls.Generate = append(mock.calls.Generate, callInfo)
	mock.lockGenerate.Unlock()
	return mock.GenerateFunc()
}

// GenerateCalls gets all the calls that were made to Generate.
// Check the length with:
//
//	len(mockedUniqueIdGenerator.GenerateCalls())
func (mock *UniqueIdGeneratorMock) GenerateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGenerate.RLock()
	calls = mock.calls.Generate
	mock.lockGenerate.RUnlock()
	return calls
}
